#!/bin/bash

set -eu

{{ template "logging" }}

#==============================================================================
# Install packages
#==============================================================================

{{ $taps := list
     "homebrew/cask-drivers"
     "homebrew/cask-fonts"
     "lyraphase/pcloud"
-}}

{{ $brews := list
     "awscli"
     "bash"
     "bat"
     "exa"
     "fish"
     "git-lfs"
     "git"
     "go-task"
     "htop"
     "jq"
     "mackup"
     "mas"
     "node"
     "openjdk"
     "ripgrep"
     "starship"
     "tldr"
     "tree"
     "wget"
-}}

{{ $casks := list
     "1password-cli"
     "1password"
     "adguard"
     "aerial"
     "altserver"
     "amethyst"
     "bartender"
     "betterdisplay"
     "cameracontroller"
     "cheatsheet"
     "datagrip"
     "discord"
     "eurkey"
     "firefox"
     "font-fira-code-nerd-font"
     "font-hack-nerd-font"
     "font-sauce-code-pro-nerd-font"
     "google-chrome"
     "hammerspoon"
     "iina"
     "imageoptim"
     "insomnia"
     "iterm2"
     "keka"
     "muzzle"
     "numi"
     "pcloud-drive"
     "protonvpn"
     "qmk-toolbox"
     "raycast"
     "rider"
     "shottr"
     "skype"
     "slack"
     "spotify"
     "telegram"
     "unity-hub"
     "visual-studio-code"
     "vlc"
     "zoom"
-}}

{{ $mas := list
    "\"1Password for Safari\", id: 1569813296"
    "\"AdGuard for Safari\", id: 1440147259"
    "\"Infuse\", id: 1136220934"
    "\"iStat Menus\", id: 1319778037"
    "\"Keepa\", id: 1533805339"
    "\"Keynote\", id: 409183694"
    "\"Numbers\", id: 409203825"
    "\"Pages\", id: 409201541"
    "\"Save to Pocket\", id: 1477385213"
    "\"Spotica Menu\", id: 570549457"
    "\"Xcode\", id: 497799835"
-}}


if [ ! "$(command -v brew)" ];
then
     info "Installing homebrew..."
     /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
else
     info "Updating brew packages..."
     brew update
     brew autoremove
     brew cleanup
     brew upgrade
fi

info "Installing brew packages..."
brew install --quiet mas
export HOMEBREW_CASK_OPTS="--no-quarantine --force --overwrite"
brew bundle --no-lock --file=/dev/stdin <<EOF

{{ range ($taps | sortAlpha | uniq) -}}
tap "{{ . }}"
{{ end -}}

{{ range ($brews | sortAlpha | uniq) -}}
brew "{{ . }}"
{{ end -}}

{{ range ($casks | sortAlpha | uniq) -}}
cask "{{ . }}"
{{ end -}}

{{ range ($mas | sortAlpha | uniq) -}}
mas {{ . }}
{{ end -}}
EOF

#==============================================================================
# Accept Xcode license
#==============================================================================

if ! $(mas list | grep -q Xcode); then
     XCODE_VERSION=`xcodebuild -version | grep '^Xcode\s' | sed -E 's/^Xcode[[:space:]]+([0-9\.]+)/\1/'`
     ACCEPTED_LICENSE_VERSION=`defaults read /Library/Preferences/com.apple.dt.Xcode 2> /dev/null | grep IDEXcodeVersionForAgreedToGMLicense | cut -d '"' -f 2`

     if [ "$XCODE_VERSION" != "$ACCEPTED_LICENSE_VERSION" ]; then
          sudo xcodebuild -license accept
     fi
fi

#==============================================================================
# Configure fish shell
#==============================================================================

info "Configuring fish shell..."
if ! grep -q $(which fish) /etc/shells; then
     sudo bash -c 'echo $(which fish) >> /etc/shells'
     chsh -s $(which fish)
fi

#==============================================================================
# Configure python
#==============================================================================

info "Configuring Python..."

# install maintained python versions
 brew install --quiet openssl readline sqlite3 xz pyenv

{{ $py_major_versions := list
     "8"
     "9"
     "10"
     "11"
-}}

{{ range ($py_major_versions) -}}

pyenv install --skip-existing 3.{{ . }}
# delete all versions of this major except for the most recent (sed -e '$ d')
pyenv versions | grep " 3\.{{ . }}" | sed -e '$ d' | xargs pyenv uninstall -f
pyenv global 3.{{ . }}

{{ end -}}

# install pipx
brew install --quiet pipx
pipx upgrade-all

# install python utilities
{{ $py_packages := list
     "black"
     "flake8"
     "isort"
     "mypy"
     "nox"
     "poetry"
     "pre-commit"
     "pylint"
     "pytest"
     "tox"
-}}

info "Installing pipx utilities..."
# Install pipx package if not already installed
{{ range ($py_packages) -}}
(pipx list --short | grep -q "{{ . }}") || pipx install "{{ . }}"
{{ end -}}

pipx inject pytest pytest-clarity &> /dev/null
pipx inject pytest pytest-sugar &> /dev/null
# store python virtual environments in the package s directory
poetry config virtualenvs.in-project true

#==============================================================================
# Install docker + colima
#==============================================================================

info "Configuring docker + colima..."

brew install --quiet colima docker docker-compose docker-credential-helper
# Compose is now a Docker plugin. For Docker to find this plugin, symlink it
mkdir -p ~/.docker/cli-plugins
ln -sfn /opt/homebrew/opt/docker-compose/bin/docker-compose ~/.docker/cli-plugins/docker-compose

#==============================================================================
# Install NodeJS packages
#==============================================================================

{{ $npm_packages := list
    "serverless"
    "@commitlint/cli"
    "@commitlint/config-conventional"
    "cz-conventional-changelog"
    "commitizen"
-}}

brew install --quiet npm

info "Updating global NodeJS packages..."
[ "$(npm outdated)" != "" ] && npm update -g --loglevel=error

info "Installing global NodeJS packages..."
# Install node package if not already installed
{{ range ($npm_packages) -}}
npm list -g "{{ . }}" &> /dev/null || npm install -g --loglevel=error "{{ . }}"
{{ end -}}

#==============================================================================
# Misc
#==============================================================================

info "Adding bat themes..."
bat cache --build

# Add screensaver
defaults -currentHost write com.apple.screensaver moduleDict -dict moduleName Aerial path "$HOME/Library/Screen Savers/Aerial.saver"
